#+TITLE: Day 3

* Part 1

** Example

#+begin_src python :results replace output :exports both
import pandas as pd

df = pd.DataFrame(
    [
        "00100",
        "11110",
        "10110",
        "10111",
        "10101",
        "01111",
        "00111",
        "11100",
        "10000",
        "11001",
        "00010",
        "01010",
    ],
    columns=["original"],
)
df["col1"] = df["original"].str[0:1].astype(int)
df["col2"] = df["original"].str[1:2].astype(int)
df["col3"] = df["original"].str[2:3].astype(int)
df["col4"] = df["original"].str[3:4].astype(int)
df["col5"] = df["original"].str[4:5].astype(int)
df.drop("original", axis=1, inplace=True)

# df.convert_dtypes()


gamma_df = df.apply(lambda x: x.value_counts().index[0])

gamma_binary = gamma_df.to_string(index=False).replace("\n", "")
print(gamma_binary)
gamma_decimal = int(gamma_binary, 2)
print(gamma_decimal)


epsilon_df = df.apply(lambda x: x.value_counts().index[1])

epsilon_binary = epsilon_df.to_string(index=False).replace("\n", "")
print(epsilon_binary)
epsilon_decimal = int(epsilon_binary, 2)
print(epsilon_decimal)

print(gamma_decimal * epsilon_decimal)
#+end_src

#+RESULTS:
: 10110
: 22
: 01001
: 9
: 198

** Real

#+begin_src python :results replace output :exports both
import pandas as pd

df = pd.read_csv(
    "./part_1_input.txt",
    # sep="\d",
    dtype="str",
    header=None,
    names=["original"],
)
# print(df.head())
df = df["original"].str.split("", expand=True)
df.drop([0,13], axis=1, inplace=True)
# print(df.head())

df.convert_dtypes()


gamma_df = df.apply(lambda x: x.value_counts().index[0])

gamma_binary = gamma_df.to_string(index=False).replace("\n", "")
print(gamma_binary)
gamma_decimal = int(gamma_binary, 2)
print(gamma_decimal)


epsilon_df = df.apply(lambda x: x.value_counts().index[1])

epsilon_binary = epsilon_df.to_string(index=False).replace("\n", "")
print(epsilon_binary)
epsilon_decimal = int(epsilon_binary, 2)
print(epsilon_decimal)

print(gamma_decimal * epsilon_decimal)
#+end_src

#+RESULTS:
: 010010010110
: 1174
: 101101101001
: 2921
: 3429254


* Part 2

** Example

#+begin_src python :results replace output :exports both
import pandas as pd

df = pd.DataFrame(
    [
        "00100",
        "11110",
        "10110",
        "10111",
        "10101",
        "01111",
        "00111",
        "11100",
        "10000",
        "11001",
        "00010",
        "01010",
    ],
    columns=["original"],
)
df["col1"] = df["original"].str[0:1].astype(int)
df["col2"] = df["original"].str[1:2].astype(int)
df["col3"] = df["original"].str[2:3].astype(int)
df["col4"] = df["original"].str[3:4].astype(int)
df["col5"] = df["original"].str[4:5].astype(int)
df.drop("original", axis=1, inplace=True)

# print(df)
# df.convert_dtypes()

# oxygen generator rating
og_df = df

# For columns in df
num_col = len(df.columns)
ox_index = 0

for i in range(num_col):
    df = df.where(df.iloc[:, 0] == df.iloc[:, 0].value_counts().index[0]).dropna()
    # print(df)
    df.drop(columns=df.columns[0], axis=1, inplace=True)
    if len(df.index) == 1:
        ox_index = df.index

print(og_df.iloc[ox_index].to_string(header=False, index=False))
ox_binary = og_df.iloc[ox_index].to_string(header=False, index=False).replace(" ", "")
ox_decimal = int(ox_binary, 2)
print(ox_decimal)

# CO2 scrubber rating
df = og_df

num_col = len(df.columns)
co2_index = 0

for i in range(num_col):
    df = df.where(df.iloc[:, 0] == df.iloc[:, 0].value_counts(ascending=True).index[0]).dropna()
    # print(df)
    df.drop(columns=df.columns[0], axis=1, inplace=True)
    if len(df.index) == 1:
        co2_index = df.index
        break

print(og_df.iloc[co2_index].to_string(header=False, index=False))
co2_binary = og_df.iloc[co2_index].to_string(header=False, index=False).replace(" ", "")
co2_decimal = int(co2_binary, 2)
print(co2_decimal)

print(ox_decimal * co2_decimal)
#+end_src

#+RESULTS:
: 1 0 1 1 0
: 22
: 0 1 1 1 1
: 15
: 330
